CREATE TABLE transactionEntity (
    uuid TEXT PRIMARY KEY,                      -- 交易UUID，设为主键
    ledger_uuid TEXT NOT NULL,                  -- 账本UUID，外键
    transaction_date INTEGER NOT NULL,          -- 交易日期（Unix时间戳）
    category_name TEXT NOT NULL,                -- 分类名称
    transaction_type TEXT NOT NULL,             -- 交易类型（INCOME、EXPENSE、TRANSFER）
    amount TEXT NOT NULL,                       -- 金额
    currency_code TEXT NOT NULL,                -- 货币代码
    remark TEXT,                                -- 备注（可为空）
    screenshot_uri TEXT,                        -- 截图URI（可为空）
    created_at INTEGER NOT NULL DEFAULT (strftime('%s','now')),   -- 创建时间
    updated_at INTEGER NOT NULL DEFAULT (strftime('%s','now')),   -- 修改时间

    FOREIGN KEY (ledger_uuid) REFERENCES ledgerEntity(uuid)
);

insert:
INSERT INTO transactionEntity (uuid, ledger_uuid, transaction_date, category_name, transaction_type, amount, currency_code, remark, screenshot_uri) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

findByUuid:
SELECT * FROM transactionEntity WHERE uuid = ?;

findAll:
SELECT * FROM transactionEntity;

update:
UPDATE transactionEntity SET
    ledger_uuid = ?,
    transaction_date = ?,
    category_name = ?,
    transaction_type = ?,
    amount = ?,
    currency_code = ?,
    remark = ?,
    screenshot_uri = ?,
    updated_at = strftime('%s','now')
WHERE uuid = ?;

deleteByUuid:
DELETE FROM transactionEntity WHERE uuid = ?;

findByLedgerUuid:
SELECT * FROM transactionEntity WHERE ledger_uuid = ?;

findByLedgerUuidAndTransactionDateBetween:
SELECT * FROM transactionEntity WHERE ledger_uuid = ? AND transaction_date BETWEEN ? AND ?;

count:
SELECT COUNT(*) FROM transactionEntity;


upsertByUuid:
INSERT INTO transactionEntity (uuid, ledger_uuid, transaction_date, category_name, transaction_type, amount, currency_code, remark, screenshot_uri, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, strftime('%s','now'), strftime('%s','now'))
ON CONFLICT(uuid) DO UPDATE SET
    ledger_uuid = excluded.ledger_uuid,
    transaction_date = excluded.transaction_date,
    category_name = excluded.category_name,
    transaction_type = excluded.transaction_type,
    amount = excluded.amount,
    currency_code = excluded.currency_code,
    remark = excluded.remark,
    screenshot_uri = excluded.screenshot_uri,
    updated_at = strftime('%s','now');


countByUserUuidAndUpdatedAtAfter:
SELECT COUNT(*) FROM transactionEntity
JOIN ledgerEntity ON transactionEntity.ledger_uuid = ledgerEntity.uuid
WHERE ledgerEntity.user_uuid = ? AND transactionEntity.updated_at > ?;


findByUserUuidAndUpdatedAtAfter:
SELECT transactionEntity.* FROM transactionEntity
JOIN ledgerEntity ON transactionEntity.ledger_uuid = ledgerEntity.uuid
WHERE ledgerEntity.user_uuid = ? AND transactionEntity.updated_at > ?;

findByUserUuid:
SELECT transactionEntity.* FROM transactionEntity
JOIN ledgerEntity ON transactionEntity.ledger_uuid = ledgerEntity.uuid
WHERE ledgerEntity.user_uuid = ?;


countByLedgerUuid:
SELECT COUNT(*) FROM transactionEntity WHERE ledger_uuid = ?;