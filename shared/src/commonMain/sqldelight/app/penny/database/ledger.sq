CREATE TABLE ledgerEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,   -- 账本ID
    uuid TEXT NOT NULL,   -- UUID
    name TEXT NOT NULL,
    currency_code TEXT NOT NULL,   -- 货币代码
    cover_name TEXT NOT NULL,   -- 封面名称(Enum.name)
    description TEXT,   -- 描述
    created_at INTEGER NOT NULL DEFAULT (strftime('%s','now')),   -- 创建时间（默认当前时间）
    updated_at INTEGER NOT NULL   DEFAULT (strftime('%s','now'))  -- 修改时间（默认当前时间）
);


insertLedger:
INSERT INTO ledgerEntity (uuid, name, currency_code, cover_name, description) VALUES (?, ?, ?, ?, ?);

getLedgerById:
SELECT * FROM ledgerEntity WHERE id = ?;

getAllLedgers:
SELECT * FROM ledgerEntity;

updateLedger:
UPDATE ledgerEntity SET name = ?, currency_code = ?, updated_at = strftime('%s','now') WHERE id = ?;

deleteLedger:
DELETE FROM ledgerEntity WHERE id = ?;


getLedgersUpdatedAfter:
SELECT * FROM ledgerEntity WHERE updated_at > ?;

upsertLedgerByUuid:
INSERT INTO ledgerEntity (uuid, name, currency_code, cover_name, description, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, strftime('%s','now'), strftime('%s','now'))
ON CONFLICT(uuid) DO UPDATE SET
    name = excluded.name,
    currency_code = excluded.currency_code,
    cover_name = excluded.cover_name,
    description = excluded.description,
    updated_at = strftime('%s','now');



countLedgersUpdatedAfter:
SELECT COUNT(*) FROM ledgerEntity WHERE updated_at > ?;