CREATE TABLE ledgerEntity (
    uuid TEXT PRIMARY KEY,                      -- 账本UUID，设为主键
    user_uuid TEXT NOT NULL,                    -- 用户UUID，外键
    name TEXT NOT NULL,                         -- 账本名称
    currency_code TEXT NOT NULL,                -- 货币代码
    cover_name TEXT NOT NULL,                   -- 封面名称（枚举名）
    description TEXT,                           -- 描述
    budget_amount TEXT,                         -- 预算金额

    created_at INTEGER NOT NULL DEFAULT (strftime('%s','now')),   -- 创建时间
    updated_at INTEGER NOT NULL DEFAULT (strftime('%s','now')),    -- 修改时间

    FOREIGN KEY (user_uuid) REFERENCES userEntity(uuid)
);

insert:
INSERT INTO ledgerEntity (uuid,user_uuid, name, currency_code, cover_name, description,budget_amount) VALUES (?, ?, ?, ?, ?, ?, ?);

findByUuid:
SELECT * FROM ledgerEntity WHERE uuid = ?;

findAll:
SELECT * FROM ledgerEntity;

update:
UPDATE ledgerEntity SET
    name = ?,
    currency_code = ?,
    cover_name = ?,
    description = ?,
    budget_amount = ?,
    updated_at = strftime('%s','now')
WHERE uuid = ?;

deleteByUuid:
DELETE FROM ledgerEntity WHERE uuid = ?;


upsertByUuid:
INSERT INTO ledgerEntity (uuid,user_uuid, name, currency_code, cover_name, description, budget_amount,created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?,strftime('%s','now'), strftime('%s','now'))
ON CONFLICT(uuid) DO UPDATE SET
    name = excluded.name,
    currency_code = excluded.currency_code,
    cover_name = excluded.cover_name,
    description = excluded.description,
    updated_at = strftime('%s','now');



findByUserUuid:
SELECT * FROM ledgerEntity WHERE user_uuid = ?;


countByUserUuid:
SELECT COUNT(*) FROM ledgerEntity WHERE user_uuid = ?;



countByUpdatedAtAfter:
SELECT COUNT(*) FROM ledgerEntity WHERE updated_at > ?;

findByUserUuidAndUpdatedAtAfter:
SELECT * FROM ledgerEntity WHERE user_uuid = ? AND updated_at > ?;


countByUserUuidAndUpdatedAtAfter:
SELECT COUNT(*) FROM ledgerEntity WHERE user_uuid = ? AND updated_at > ?;